I remove all of these from the OncoSimulR.Rmd file: most of them are
useless, distracting, and make markdown mode choke.



<!-- html_book seems to ignore the toc_float -->

  <!-- bookdown::gitbook: -->
  <!--   self_contained: false -->
  <!--   split_by: rmd -->
  <!--   css: custom4.css -->
  <!--   github-repo: "rdiaz02/OncoSimul" -->
  <!--   config: -->
  <!--     toc: -->
  <!--       collapse: subsection -->
  <!--     download: null -->
  <!--     sharing: null -->


<!-- A great one? Well... Slow, and no subsubsection and strange scrolling-->
<!-- render("OncoSimulR.Rmd", bookdown::gitbook(self_contained = FALSE, split_by = "none")) -->
<!-- Slow rendering, and the clicking on TOC to get expanded entries does -->
<!-- not work. -->
<!-- And it creates a libs dir that takes 5 MB. -->
<!-- What I like is the possibility to hide the TOC, change rendering -->
<!-- (color, font size and type) and download.  -->

<!-- This did not work well either.  -->
  <!-- bookdown::gitbook: -->
  <!--   toc-depth: 4  -->
  <!--   self_contained: false -->
  <!--   split_by: none -->
  <!--   css: custom4.css -->
  <!--   github-repo: "rdiaz02/OncoSimul" -->
  <!--   config: -->
  <!--     toc: -->
  <!--       collapse: section -->
  <!--       scroll_highlight: true -->
  <!--       after: null -->
  <!--       before: null -->
  <!--       toc-depth: 4		 -->
  <!--     toolbar: -->
  <!--       position: fixed -->
  <!--     edit: -->
  <!--       link: null -->
  <!--       text: null -->
  <!--     download: null -->
  <!--     search: no -->
  <!--     fontsettings: -->
  <!--       theme: white -->
  <!--       family: sans -->
  <!--       size: 2 -->
  <!--     sharing: null -->

<!-- download, only on my web site -->
<!-- EPUB and MOBI and PDF -->
<!-- url: "https\://" -->

<!-- output:  -->
<!--   bookdown::html_document2:  -->
<!--     toc: yes -->
<!--     toc_float: true -->
<!--     css: custom4.css -->


<!-- ##    <rdiaz02@gmail.com>, <http://ligarto.org/rdiaz> -->
<!-- ## date: "`r Sys.Date()`" -->

<!-- ## Bioc html_document no refs -->
<!-- ## Bioc html_document2 too wide margins and really ugly -->
<!-- ## Simplest is to use bookdown and add BioC CSS -->
<!-- ## Rmdformats is really neat, but no support for \@ref -->
<!-- ## PDF as: 

<!-- render("OncoSimulR.Rmd", output_format = bookdown::pdf_document2(toc = TRUE, toc_depth = 4, keep_tex = TRUE)  -->

<!-- -->


<!-- After the fix in BiocStyle 2.3.24 can use this too, which gives the  -->
<!-- BiocStyle output, but it is not the same as the one for Rnw and -->
<!-- breaks refs, etc. I do not really like it-->
<!-- ## PDF as: render("OncoSimulR.Rmd", output_format = BiocStyle::pdf_document2(toc = TRUE, toc_depth = 4, keep_tex = TRUE)) -->




<!-- bookdown::pdf_document2 seems to produce the tex even if failures -->


<!-- This did not work -->
<!--     bookdown::pdf_document2: -->
<!--       template: template2.tex	 -->
<!--       keep_tex: true -->
<!--       toc: true -->

<!-- I convert Rfunction to italics on typewriter -->
<!-- sed -i 's/\\Rfunction{\([^}]\+\)}/*`\1`*/g' p22.md -->






<!-- More complex example where we look at accumulation of deleterious -->

<!-- ```{r r ex-tomlin3} -->
<!-- set.seed(2) ## for reproducibility -->
<!-- RNGkind("L'Ecuyer-CMRG") -->

<!-- sd <- 0.1 ## fitness effect of drivers -->
<!-- sp <- -0.01 ## fitness effect of mildly deleterious passengers -->
<!-- sm <- 0 ## fitness effect of mutator -->
<!-- nd <- 20 ## number of drivers -->
<!-- nm <- 5  ## number of mutators -->
<!-- np <- 50 -->
<!-- mut <- 5 ## mutator effect -->

<!-- fitnessGenesVector <- c(rep(sd, nd), rep(sm, nm), rep(sp, np)) -->
<!-- names(fitnessGenesVector) <- 1:(nd + nm + np) -->
<!-- mutatorGenesVector <- rep(mut, nm) -->
<!-- names(mutatorGenesVector) <- (nd + np + 1):(nd + np + nm) -->

<!-- ft <- allFitnessEffects(noIntGenes = fitnessGenesVector, -->
<!--                         drvNames = 1:nd) -->
<!-- mt <- allMutatorEffects(noIntGenes = mutatorGenesVector) -->

<!-- ddr <- 4 -->
<!-- st <- oncoSimulPop(4, ft, muEF = mt, -->
<!--                    detectionDrivers = ddr, -->
<!--                    finalTime = NA, -->
<!--                    detectionSize = NA, -->
<!--                    detectionProb = NA, -->
<!--                    onlyCancer = FALSE, -->
<!--                    keepEvery = NA,  -->
<!--                    mc.cores = 2, ## adapt to your hardware -->
<!--                    seed = NULL) ## for reproducibility -->
<!-- colSums(samplePop(st, timeSample = "last", typeSample = "single"), na.rm = TRUE) -->
<!-- ``` -->





<!-- % set.seed(9) -->
<!-- % ep1 <- oncoSimulIndiv(sv2, model = "McFL", -->
<!-- %                      mu = 5e-6, -->
<!-- %                      sampleEvery = 0.02, -->
<!-- %                      keepEvery = 0.5, -->
<!-- %                      initSize = 2000, -->
<!-- %                      finalTime = 3000, -->
<!-- %                      onlyCancer = FALSE) -->

<!-- %% <<fig.width=6.5, fig.height=10>>= -->
<!-- %%  ## 1. Fitness effects: here we specify a  -->
<!-- %%  ##    epistatic model with modules. -->
<!-- %%  sa <- 0.1 -->
<!-- %%  sb <- -0.2 -->
<!-- %%  sab <- 0.25 -->
<!-- %%  sac <- -0.1 -->
<!-- %%  sbc <- 0.25 -->
<!-- %%  sv2 <- allFitnessEffects(epistasis = c("-A : B" = sb, -->
<!-- %%                                         "A : -B" = sa, -->
<!-- %%                                         "A : C" = sac, -->
<!-- %%                                         "A:B" = sab, -->
<!-- %%                                         "-A:B:C" = sbc), -->
<!-- %%                           geneToModule = c( -->
<!-- %%                               "Root" = "Root", -->
<!-- %%                               "A" = "a1, a2", -->
<!-- %%                               "B" = "b", -->
<!-- %%                               "C" = "c")) -->
<!-- %%  evalAllGenotypes(sv2, order = FALSE, addwt = TRUE) -->

<!-- %%  ## 2. Simulate the data. Here we use the "McFL" model and set explicitly -->
<!-- %%  ##    parameters for mutation rate, final and initial sizes, etc. -->
<!-- %%  RNGkind("Mersenne-Twister") -->
<!-- %%  set.seed(983) -->
<!-- %%  ep1 <- oncoSimulIndiv(sv2, model = "McFL", -->
<!-- %%                       mu = 5e-6, -->
<!-- %%                       sampleEvery = 0.02, -->
<!-- %%                       keepEvery = 0.5, -->
<!-- %%                       initSize = 2000, -->
<!-- %%                       finalTime = 3000, -->
<!-- %%                       onlyCancer = FALSE) -->
<!-- %% @  -->



<!-- ## Increase ylim and legend.ncols to avoid overlap of  -->
<!-- ## legend with rest of figure -->
<!-- plot(ep1, show = "genotypes", ylim = c(0, 4500),  -->
<!--      legend.ncols = 4, -->
<!--      xlim = c(0, 1500), -->
<!--      thinData = TRUE, thinData.keep = 0.5) -->


<!-- % set.seed(6) ## Fix the seed, so we can repeat it -->
<!-- % ep2 <- oncoSimulIndiv(pancr, model = "McFL", -->
<!-- %                      mu = 1e-6, -->
<!-- %                      sampleEvery = 0.02, -->
<!-- %                      keepEvery = 1, -->
<!-- %                      initSize = 2000, -->
<!-- %                      finalTime = 10000, -->
<!-- %                      onlyCancer = FALSE)
-->


<!-- This no longer helps that much with the many changes -->
<!-- You -->
<!-- can also take a look at this -->
<!-- poster, [http://dx.doi.org/10.7490/f1000research.1112860.1](http://dx.doi.org/10.7490/f1000research.1112860.1), -->
<!-- presented at ECCB 2016. -->



<!-- How to simulate Big Bang: start from some initMutant, say S, so that -->
<!-- S A B C ...  Fitness -->
<!-- 1 0 0 0 0    >1 -->

<!-- and add that column of S with 1 to all genotypes from fitness -->

<!-- * What happens with mutator?   -->
<!--   - the fl specification? now tested-->
<!--   - do we have modules? nope in fitness yes in mutator -->


<!-- Bozic and fitness landscape specification -->
<!-- if(nrow(rFE$fitnessLandscape_df) > 0) -->
<!--             warning("Bozic model passing a fitness landscape will not work", -->
<!--                     " for now.") -->
<!--         ## FIXME: bozic and fitness landscape -->
<!--         ## the issue is that in the C++ code we directly do -->
<!--         ## s = birth rate - 1 -->
<!--         ## but we would need something different -->
<!--         ## Can be done going through epistasis, etc -->

<!-- We will see an example of this way of passing fitness again in -->
<!-- \@ref(bauer), where we will compare it with the lego system. -->


<!-- % Please see the documentation of `allFitnessEffects` for further -->
<!-- % details and examples. -->


<!-- % This can be done with OncoSimulR (e.g., see sections \@ref(e2), \@ref(e3) -->
<!-- % and \@ref(theminus) or the example in \@ref(weis1b)), but this only makes -->
<!-- % sense for subsets of the genes or for very small genotypes, as you -->
<!-- % probably do not want to be explicit about the mapping of $2^k$ genotypes -->
<!-- % to fitness when $k$ is larger than, say, four or five, and definitely not -->
<!-- % when $k$ is 10. -->


<!-- Not for self: actually, what I really do is mapping -->
<!-- the genotypes to epistasis effects. -->

<!-- So we either use a succint description, or we map all -->
<!-- to epistasis. -->



<!-- % A guiding design principle of OncoSimulR is to try to make the -->
<!-- % specification of those effects as simple as possible but also as flexible -->
<!-- % as possible.  -->



<!-- % As we will see in the examples (e.g., see sections \@ref(e2), \@ref(e3), -->
<!-- % \@ref(exlong)) OncoSimulR makes it simple to be explicit about the mapping -->
<!-- % of specific genotypes, while also using the ``how this specific effects -->
<!-- % modifies previous effects" logic, leading to a flexible -->
<!-- % specification. This also means that in many cases the same fitness -->
<!-- % effects can be specified in several different ways. -->


<!-- %% <<>>= -->
<!-- %% o3 <- allFitnessEffects(orderEffects = c( -->
<!-- %%                             "F > D > M" = -0.3, -->
<!-- %%                             "D > F > M" = 0.4, -->
<!-- %%                             "D > M > F" = 0.2, -->
<!-- %%                             "D > M"     = 0.1, -->
<!-- %%                             "M > D"     = 0.5), -->
<!-- %%                         geneToModule = -->
<!-- %%                             c("Root" = "Root", -->
<!-- %%                               "M" = "m", -->
<!-- %%                               "F" = "f", -->
<!-- %%                               "D" = "d") ) -->
<!-- %% (ag <- evalAllGenotypes(o3, addwt = TRUE)) -->
<!-- %% @  -->



<!-- % If the primary driver is -->
<!-- % mutated, then the expression is $\frac{1+S_D^+}{1+S_D^-} (1 + S_{DP})^k$. -->
<!-- % They set apoptosis as $1 - proliferation$.  So, ignoring constants such as -->
<!-- % $1/2$, and setting $ P = \frac{1+S_D^+}{1+S_D^-}$ we can prepare a table -->
<!-- % as (for a largest $k$ of 5 in this example, but can make it arbitrarily -->
<!-- % large): -->

<!-- % <<>>= -->

<!-- % K <- 5 -->
<!-- % sd <- 0.1 -->
<!-- % sdp <- 0.15 -->
<!-- % sp <- 0.05 -->
<!-- % bauer <- data.frame(parent = c("Root", rep("p", K)), -->
<!-- %                     child = c("p", paste0("s", 1:K)), -->
<!-- %                     s = c(sd, rep(sdp, K)), -->
<!-- %                     sh = c(0, rep(sp, K)), -->
<!-- %                     typeDep = "MN") -->
<!-- % fbauer <- allFitnessEffects(bauer) -->


<!-- % @  -->




<!-- % <<>>= -->
<!-- % (b1 <- evalAllGenotypes(fbauer, order = FALSE))[1:10, ] -->
<!-- % @  -->

<!-- % Order makes no difference -->

<!-- % <<>>= -->
<!-- % (b2 <- evalAllGenotypes(fbauer, order = TRUE, max = 2000))[1:15, ] -->
<!-- % @  -->

<!-- % And the number of levels is the right one: 11 -->
<!-- % <<>>= -->
<!-- % length(table(b1$Fitness)) -->
<!-- % length(table(b2$Fitness)) -->
<!-- % @  -->


<!-- %% ### Bauer et al.\ specified only via epistatic interactions} -->
<!-- %% Yes, do it: as -p,s1, and -p,s2, etc. But much more of a mess. -->

<!-- %% ### Adding modules to Bauer et al.} -->

<!-- %% o3init <- allFitnessEffects(orderEffects = c( -->
<!-- %%                             "M > D > F" = 0.99, -->
<!-- %%                             "D > M > F" = 0.2, -->
<!-- %%                             "D > M"     = 0.1, -->
<!-- %%                             "M > D"     = 0.9), -->
<!-- %%                         noIntGenes = c("u" = 0.01,  -->
<!-- %%                                        "v" = 0.01, -->
<!-- %%                                        "w" = 0.001, -->
<!-- %%                                        "x" = 0.0001, -->
<!-- %%                                        "y" = -0.0001, -->
<!-- %%                                        "z" = -0.001), -->
<!-- %%                         geneToModule = -->
<!-- %%                             c("Root" = "Root", -->
<!-- %%                               "M" = "m", -->
<!-- %%                               "F" = "f", -->
<!-- %%                               "D" = "d") ) -->


<!-- % The third mechanism for stopping the simulation assumes that the -->
<!-- % probability of tumor detection increases with the total population -->
<!-- % size. This is biologically a reasonable assumption: the larger the tumor, -->
<!-- % the more likely it is it will be detected.  -->



 <!-- \begin{equation} -->
 <!--   P(N) =  -->
 <!--   \begin{cases} -->
 <!--   1 - e^{ -cPDetect (N - PDBaseline)} & \text{if } N > PDBaseline \\ -->
 <!--   0 & \text{if } N \leq PDBaseline -->
 <!--   \end{cases} -->
 <!--   \label{eq:2} -->
 <!-- \end{equation} -->



<!-- % %% For poster -->
<!-- % <<>>= -->

<!-- % pdf(file = "b1-traj.pdf", width = 8, height = 8) -->
<!-- % par(cex = 1.55) -->
<!-- % par(cex.axis= 0.9) -->
<!-- % par(las = 1) -->
<!-- % plot(b1, show = "genotypes", type = "stacked",  -->
<!-- %      plotDiversity = TRUE, legend.ncols = 3) -->
<!-- % dev.off() -->

<!-- % @  -->



<!-- %% Interesting to show effects of order: o3 -->

<!-- %% Increase mutation rate, so does not take forever -->
<!-- %% <<>>= -->

<!-- %% tmp <-  oncoSimulIndiv(examplesFitnessEffects[["o3"]], -->
<!-- %%                        model = "McFL",  -->
<!-- %%                        mu = 5e-5, -->
<!-- %%                        detectionSize = 1e8,  -->
<!-- %%                        detectionDrivers = 3, -->
<!-- %%                        sampleEvery = 0.025, -->
<!-- %%                        max.num.tries = 10, -->
<!-- %%                        keepEvery = -9, -->
<!-- %%                        initSize = 2000, -->
<!-- %%                        finalTime = 8000, -->
<!-- %%                        onlyCancer = TRUE);  -->

<!-- %% tmp -->

<!-- %% tmp <-  oncoSimulIndiv(examplesFitnessEffects[["o3"]], -->
<!-- %%                        model = "Bozic",  -->
<!-- %%                        mu = 5e-5, -->
<!-- %%                        detectionSize = 1e6,  -->
<!-- %%                        detectionDrivers = 4, -->
<!-- %%                        sampleEvery = 2, -->
<!-- %%                        max.num.tries = 100, -->
<!-- %%                        keepEvery = -9, -->
<!-- %%                        initSize = 2000, -->
<!-- %%                        onlyCancer = TRUE) -->
<!-- %% tmp -->

<!-- %% @  -->



<!-- %% These patterns, however, are not always present -->

<!-- %% <<fig.width=6>>= -->

<!-- %% set.seed(7654)  -->
<!-- %% tmp <-  oncoSimulIndiv(examplesFitnessEffects[["o3"]], -->
<!-- %%                        model = "McFL",  -->
<!-- %%                        mu = 5e-5, -->
<!-- %%                        detectionSize = 1e8,  -->
<!-- %%                        detectionDrivers = 3, -->
<!-- %%                        sampleEvery = 0.015, -->
<!-- %%                        max.num.tries = 10, -->
<!-- %%                        keepEvery = 5, -->
<!-- %%                        initSize = 2000, -->
<!-- %%                        finalTime = 10000, -->
<!-- %%                        onlyCancer = FALSE, -->
<!-- %%                        extraTime = 10) -->
<!-- %% tmp -->
<!-- %% plot(tmp, addtot = TRUE, log = "") -->

<!-- %% @  -->


<!-- %% Although in other runs we do not reach the three gene mutant and continue -->
<!-- %% with clone competition for a long time: -->


<!-- Other reasons for choosing one over the other
--> <!-- might have to do with flexibility (e.g., if you use -->
<!-- `oncoSimulPop` the arguments for `detectionSize`, --> <!--
`detectionDrivers` must be the same for all simulations but this is
--> <!-- not the case for `oncoSimulSample`) and parallelized -->
<!-- execution.  --> 



<!-- % As an example, if you look at the output above, the object "pancrSamp" -->
<!-- % contains some simulations that have only a few drivers because those -->
<!-- % simulations were set to run only until they had just a small number of -->
<!-- % cells. -->




<!-- % ### `popSizeSample` and `oncoSimulPop`} -->
<!-- % \label{popss-osp} -->


<!-- % Suppose you run a set of simulations with a large `finalTime` with -->
<!-- % `oncoSimulPop`. Since you can pass to `samplePop` a -->
<!-- % vector for `popSizeSample` this might seem to resemble a -->
<!-- % deterministic version of the stochastic detection mechanism -->
<!-- % (\@ref(detectprob)): for each simulation, you would take a sample at the -->
<!-- % first time a given population size is reached. You should notice, however, -->
<!-- % that for any simulation you are not sampling with a probability of -->
<!-- % detection that increases with size. Moreover, you can end up with "NA" -->
<!-- % in your sample. Suppose you have a set of fitness such that a given -->
<!-- % simulation, say number 1, never went beyond total population size -->
<!-- % 1000. Now, if you pass a vector of `popSizeSample` that has a value -->
<!-- % larger than a 1000 for the first position, you will get an "NA": there -->
<!-- % never is a value where for population size where that size is reached.  -->


<!-- %% in an attempt to explain it, this just makes it too confusing. The -->
<!-- %% above is enough. -->
<!-- %% ## What if there is order? {#sim-order} -->

<!-- %% Consider the following example (I fix the seed and use a single core, so -->
<!-- %% no parallelization, to make sure we can reproduce the results) -->

<!-- %% <<>>= -->

<!-- %% oe8 <- allFitnessEffects(orderEffects = c( -->
<!-- %%                              "M > F > M" = 0, -->
<!-- %%                              "D > F > M" = 0.1, -->
<!-- %%                              "F > D > M" = 0.2 -->
<!-- %% ), -->
<!-- %%                       epistasis = c("D" = 0.02, "M" = 0.02, "F" = 0.02), -->
<!-- %%                         geneToModule = -->
<!-- %%                             c("Root" = "Root", -->
<!-- %%                               "M" = "m", -->
<!-- %%                               "F" = "f", -->
<!-- %%                               "D" = "d") ) -->

<!-- %% evalAllGenotypes(oe8) -->

<!-- %% set.seed(678)  -->
<!-- %% oe8P1 <- oncoSimulPop(8, oe8, -->
<!-- %%                      model = "Exp",  -->
<!-- %%                       detectionSize = 1e8, keepEvery = 10, mc.cores = 1) -->
<!-- %% lapply(oe8P1, print) -->




<!-- %% set.seed(678)  -->
<!-- %% oe8P1 <- oncoSimulPop(1, oe8, -->
<!-- %%                      model = "McFL",  -->
<!-- %%                       detectionDrivers = 2,  -->
<!-- %%                       keepEvery = 10, mc.cores = 1) -->
<!-- %% lapply(oe8P1, print) -->

<!-- %% @  -->




<!-- %% <<>>= -->

<!-- %% o8 <- allFitnessEffects(orderEffects = c( -->
<!-- %%                             "F > D" = 0, -->
<!-- %%                             "D > F" = 0.14, -->
<!-- %%                             "D > M" = 0.13, -->
<!-- %%                             "F > M" = 0.12, -->
<!-- %%                             "M > D" = 0.15), -->
<!-- %%                       epistasis = c("D" = 0.01, "M" = 0.01, "F" = 0.02), -->
<!-- %%                         geneToModule = -->
<!-- %%                             c("Root" = "Root", -->
<!-- %%                               "M" = "m", -->
<!-- %%                               "F" = "f", -->
<!-- %%                               "D" = "d") ) -->

<!-- %% evalAllGenotypes(o8) -->

<!-- %% set.seed(678)  -->
<!-- %% o8P1 <- oncoSimulPop(8, o8, -->
<!-- %%                      model = "Exp", keepEvery = 10, mc.cores = 1) -->
<!-- %% ## lapply(o8P1, print) -->
<!-- %% @  -->

<!-- %% Now, if we look at the sixth population we see -->

<!-- %% <<>>= -->
<!-- %% o8P1[[6]] -->
<!-- %% @  -->

<!-- %% Obviously, in terms of the genes that are mutated, both "d, f, m" and -->
<!-- %% "d, m, f" have the same genes mutated so if we sample, for instance doing -->

<!-- %% <<>>= -->

<!-- %% @  -->





<!-- %% o9 <- allFitnessEffects(orderEffects = c( -->
<!-- %%                             "F > D > M" = 0, -->
<!-- %%                             "D > F > M" = 0.14, -->
<!-- %%                             "D > M > F" = 0.13, -->
<!-- %%                             "D > M"     = 0.12, -->
<!-- %%                             "M > D"     = 0.15), -->
<!-- %%                       epistasis = c("D:-M" = 0.05, "M:-D" = 0.04), -->
<!-- %%                         geneToModule = -->
<!-- %%                             c("Root" = "Root", -->
<!-- %%                               "M" = "m", -->
<!-- %%                               "F" = "f", -->
<!-- %%                               "D" = "d") ) -->


<!-- %% set.seed(11) -->
<!-- %% o9P1 <- oncoSimulPop(8, o9, -->
<!-- %%                      model = "Exp", keepEvery = 10, mc.cores = 1) -->
<!-- %% lapply(o9P1, print) -->


<!-- %% @  -->



<!-- %% ## Testing of mappings} -->

<!-- %% The mapping of restriction tables, epistasis, and order effects to -->
<!-- %% fitness, especially when there are modules, is a delicate part of the -->
<!-- %% code: reasonable cases are straightforward to deal with, but there are -->
<!-- %% many ways to shoot oneself in the foot. That is why we have placed lots of -->
<!-- %% pre- and post-condition checks in the code (both R and C++), and we have a -->
<!-- %% comprehensive set of tests in file zz. You are welcome to suggest more -->
<!-- %% tricky scenarios (and tests for them). -->


<!-- In an abuse of terminology, we will use functions with the "phylog" -->
<!-- term, but note these are not proper phylogenies. (Though you could -->
<!-- construct proper phylogenies from the information kept). -->




<!-- % % %% For poster -->

<!-- % <<>>= -->

<!-- % pdf("phylog-clone1.pdf", width = 4, height = 3.4) -->
<!-- % par(cex = 0.4); plotClonePhylog(mcf1s, N = 1, t = c(900, 1000), timeEvents = TRUE) -->
<!-- % dev.off() -->

<!-- % @  -->


<!-- $$ -->
<!--   f_i = -c d(i, reference) + x_i -->
<!-- $$ {#eq:1} -->


<!-- from the
`pops.by.time` --> <!-- returned object (i.e., from the genotypes at
each of the sampling --> <!-- times) and, thus, -->


<!-- I provide two -->
<!-- implementations, one where a single LOD per simulation is returned, -->
<!-- with the same meaning as in @szendro_predictability_2013, and -->
<!-- another where I keep all the paths that "(...) arrive at the most -->
<!-- populated genotype at the final time" (first paragraph in p. 572 of -->
<!-- Szendro et al.). We can also obtain a single LOD that is the first -->
<!-- path to arrive at the genotype that eventually becomes the most -->
<!-- populated genotype at the final time (and, in this sense, agrees -->
<!-- with the LOD of Szendro et al.). See the help file for details. -->
<!-- Obtaining LOD requires that the simulations be run with `keepPhylog -->
<!-- = TRUE` (we need the genealogy of clones). -->


<!-- My implementation is not exactly identical to --> <!-- the
definition given in p. 572 of Szendro et al. First, in case this
might --> <!-- be useful, for each simulation I keep all the paths
that "(...) arrive at --> <!-- the most populated genotype at the
final time" (first paragraph in p. 572 --> <!-- of Szendro et al.),
whereas they only keep one (see second column of --> <!--
p. 572). However, I do provide a single LOD for each run, too. This
is the --> <!-- first path to arrive at the genotype that eventually
becomes the most --> <!-- populated genotype at the final time (and,
in this sense, agrees with the --> <!-- LOD of Szendro et
al.). However, in contrast to what is apparently done in --> <!--
Szendro ("A given genotype may undergo several episodes of
colonization --> <!-- and extinction that are stored by the
algorithm, and the last episode --> <!-- before the colonization of
the final state is used to construct the --> <!-- step."), I do not
check that this genotype (which is the one that will --> <!-- become
the most populated at final time) does not become extinct before -->
<!-- the final colonization. So there could be other paths (all in
`all_paths`) --> <!-- that are actually the one(s) that are
colonizers of the most populated --> <!-- genotype (with no
extinction before the final --> <!-- colonization). -->


<!-- My implementation is not exactly identical to their -->
<!-- definition. My `lod_single` is the first path to arrive at the genotype that -->
<!-- eventually becomes the most populated genotype at the final time (and, in -->
<!-- this sense, agrees with the LOD of Szendro et al.). However, in contrast to -->
<!-- what is apparently done in Szendro et al. ("A given genotype may undergo -->
<!-- several episodes of colonization and extinction that are stored by the -->
<!-- algorithm, and the last episode before the colinization of the final state -->
<!-- is used to construct the step."), I do not check that this genotype (which -->
<!-- is the one that will become the most populated at final time) does not -->
<!-- become extinct before the final colonization. So there could be other paths -->
<!-- that are actually the one(s) that are colonizers of the most populated -->
<!-- genotype (with no extinction before the final colonization). Nevertheless, -->
<!-- all the paths that "(...) arrive at the most populated genotype at the final -->
<!-- time" (first paragraph in p. 572 of Szendro et al.), are stored (in the -->
<!-- `all_paths` list returned). (This differs from Szendro et al., as they only -->
<!-- keep one ---see second column of p. 572). -->

<!-- As just said, in case this might be useful, for each simulation I keep all -->
<!-- the paths that "(...) arrive at the most populated genotype at the final -->
<!-- time" (first paragraph in p. 572 of Szendro et al.), whereas they only . -->


<!-- Note that using LOD requires running the simulations with -->
<!-- `keepPhylog = TRUE`. -->


<!-- The code for computing fitness, however, should deal with all -->
<!-- of this just fine. -->







<!-- As we are interested in examining the effects of selection, mutation, -->
<!-- keeping track of the parent-child relationships between clones, etc, and -->
<!-- thus we must keep track of the complete set of clones. -->



<!-- (or haplotype if -->
<!-- you want, as that is the term used in the reference below ---but see -->
<!-- \@(meaningclone)) -->



<!-- What we have explained is an obvious "trick" that has been used for -->
<!-- a long time.  For instance, John H. Gillespie in his classical 1993 -->
<!-- paper @Gillespie1993 writes in p. 972: -->



<!-- > Allelic genealogies are represented in the computer by a rooted -->
<!-- > tree, each node of which is a unique haplotype.  A haplotype node is -->
<!-- > a data structure with pointers to parent and sibling nodes and with -->
<!-- > values of the current abundance and selection coefficient of the -->
<!-- > haplotype.  Each node also records the generation at which the -->
<!-- > haplotype first appeared in the population with its mutant site -->
<!-- > (the origination time of the site) and, should the mutation become -->
<!-- > fixed-the node becomes the root node for all alleles in the -->
<!-- > population-the fixation time of the site.  When haplotypes without -->
<!-- > descendents are lost from the population, the allelic genealogy is -->
<!-- > pruned to free computer memory.  When the simulation is completed, -->
<!-- > the properties of the origination and fixation point processes may -->
<!-- > be studied by 'climbing' the tree and recording the origination and -->
<!-- > fixation times of sites." -->



<!-- Again, e that we never prune any -->
<!-- clone that had a population size larger than zero at any sampling -->
<!-- period (so they are reflected in the `pops.by.time` matrix in the -->
<!-- output).  -->




<!-- Keeping track of clones (not individuals) and erasing clones that have no -->
<!-- descendants from the `pops.by.time` matrix (and other internal structures -->
<!-- in the C++ code) therefore leads to important memory and time -->
<!-- savings.  -->




<!-- %% As an example, we can try to infer an oncogenetic tree -->
<!-- %% (and plot it) using the `r CRANpkg("Oncotree")` package @Oncotree after -->
<!-- %% getting a quick look at the marginal frequencies of events: -->

<!-- %% <<fig.width=4, fig.height=4>>= -->
<!-- %% colSums(pancrSamp)/nrow(pancrSamp) -->

<!-- %% require(Oncotree) -->
<!-- %% otp <- oncotree.fit(pancrSamp) -->
<!-- %% plot(otp) -->
<!-- %% @  -->
<!-- %% We explicitly -->
<!-- %% set `silent = TRUE` to prevent the vignette from filling up with -->
<!-- %% intermediate output. -->
